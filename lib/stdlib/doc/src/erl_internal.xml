<?xml version="1.0" encoding="latin1" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>1996</year>
      <year>2011</year>
      <holder>Ericsson AB, All Rights Reserved</holder>
    </copyright>
    <legalnotice>
  The contents of this file are subject to the Erlang Public License,
  Version 1.1, (the "License"); you may not use this file except in
  compliance with the License. You should have received a copy of the
  Erlang Public License along with this software. If not, it can be
  retrieved online at http://www.erlang.org/.

  Software distributed under the License is distributed on an "AS IS"
  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
  the License for the specific language governing rights and limitations
  under the License.

  The Initial Developer of the Original Code is Ericsson AB.
    </legalnotice>

    <title>erl_internal</title>
    <prepared>Robert Virding</prepared>
    <responsible>Bjarne D&auml;cker</responsible>
    <docno>1</docno>
    <approved>Bjarne D&auml;cker</approved>
    <checked></checked>
    <date>97-01-21</date>
    <rev>B</rev>
    <file>erl_internal.sgml</file>
  </header>
  <module>erl_internal</module>
  <modulesummary>Internal Erlang Definitions</modulesummary>
  <description>
    <p>This module defines Erlang BIFs, guard tests and operators.
      This module is only of interest to programmers who
      manipulate Erlang code.</p>
  </description>
  <funcs>
    <func>
      <name>bif(Name, Arity) -> bool()</name>
      <fsummary>Test for an Erlang BIF</fsummary>
      <type>
        <v>Name = atom()</v>
        <v>Arity = integer()</v>
      </type>
      <desc>
        <p>Returns <c>true</c> if <c>Name/Arity</c> is an Erlang BIF
          which is automatically recognized by the compiler, otherwise
          <c>false</c>.</p>
      </desc>
    </func>
    <func>
      <name>guard_bif(Name, Arity) -> bool()</name>
      <fsummary>Test for an Erlang BIF allowed in guards</fsummary>
      <type>
        <v>Name = atom()</v>
        <v>Arity = integer()</v>
      </type>
      <desc>
        <p>Returns <c>true</c> if <c>Name/Arity</c> is an Erlang BIF
          which is allowed in guards, otherwise <c>false</c>.</p>
      </desc>
    </func>
    <func>
      <name>type_test(Name, Arity) -> bool()</name>
      <fsummary>Test for a valid type test</fsummary>
      <type>
        <v>Name = atom()</v>
        <v>Arity = integer()</v>
      </type>
      <desc>
        <p>Returns <c>true</c> if <c>Name/Arity</c> is a valid Erlang
          type test, otherwise <c>false</c>.</p>
      </desc>
    </func>
    <func>
      <name>arith_op(OpName, Arity) -> bool()</name>
      <fsummary>Test for an arithmetic operator</fsummary>
      <type>
        <v>OpName = atom()</v>
        <v>Arity = integer()</v>
      </type>
      <desc>
        <p>Returns <c>true</c> if <c>OpName/Arity</c> is an arithmetic
          operator, otherwise <c>false</c>.</p>
      </desc>
    </func>
    <func>
      <name>bool_op(OpName, Arity) -> bool()</name>
      <fsummary>Test for a Boolean operator</fsummary>
      <type>
        <v>OpName = atom()</v>
        <v>Arity = integer()</v>
      </type>
      <desc>
        <p>Returns <c>true</c> if <c>OpName/Arity</c> is a Boolean
          operator, otherwise <c>false</c>.</p>
      </desc>
    </func>
    <func>
      <name>comp_op(OpName, Arity) -> bool()</name>
      <fsummary>Test for a comparison operator</fsummary>
      <type>
        <v>OpName = atom()</v>
        <v>Arity = integer()</v>
      </type>
      <desc>
        <p>Returns <c>true</c> if <c>OpName/Arity</c> is a comparison
          operator, otherwise <c>false</c>.</p>
      </desc>
    </func>
    <func>
      <name>list_op(OpName, Arity) -> bool()</name>
      <fsummary>Test for a list operator</fsummary>
      <type>
        <v>OpName = atom()</v>
        <v>Arity = integer()</v>
      </type>
      <desc>
        <p>Returns <c>true</c> if <c>OpName/Arity</c> is a list
          operator, otherwise <c>false</c>.</p>
      </desc>
    </func>
    <func>
      <name>send_op(OpName, Arity) -> bool()</name>
      <fsummary>Test for a send operator</fsummary>
      <type>
        <v>OpName = atom()</v>
        <v>Arity = integer()</v>
      </type>
      <desc>
        <p>Returns <c>true</c> if <c>OpName/Arity</c> is a send
          operator, otherwise <c>false</c>.</p>
      </desc>
    </func>
    <func>
      <name>op_type(OpName, Arity) -> Type</name>
      <fsummary>Return operator type</fsummary>
      <type>
        <v>OpName = atom()</v>
        <v>Arity = integer()</v>
        <v>Type = arith | bool | comp | list | send</v>
      </type>
      <desc>
        <p>Returns the <c>Type</c> of operator that <c>OpName/Arity</c> 
          belongs to, 
          or generates a <c>function_clause</c> error if it is not an 
          operator at all.</p>
      </desc>
    </func>
  </funcs>
</erlref>

